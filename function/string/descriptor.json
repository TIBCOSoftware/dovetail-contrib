{
  "name": "string",
  "type": "flogo:function",
  "version": "0.9.0",
  "title": "String Functions",
  "description": "String Functions",
  "homepage": "https://github.com/project-flogo/contrib/tree/master/function/string",
  "functions": [
      {
        "args": [
            {
                "name": "str1",
                "type": "string"
            },
            {
                "name": "str2",
                "type": "string",
                "variable": true
            }
        ],
        "help": {
            "description": "Returns the concatenation of the arguments. You can concatenate two or more strings.",
            "example": "string.concat(\"Hello\",' ', \"World\")\nReturns\nHello World",
            "usage": "string.concat(\u003c\u003c string1 \u003e\u003e, \u003c\u003c string2,... \u003e\u003e)\nReturn Type\nstring"
        },
        "name": "concat",
        "return": {
            "type": "string"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "str",
                "type": "string"
            },
            {
                "name": "substr",
                "type": "string"
            }
        ],
        "help": {
            "description": "Returns whether a substring is contained in another string.",
            "example": "string.contains(\"TIBCO Web Integrator\", \"Integration\")\nReturns\ntrue",
            "usage": "string.contains(\u003c\u003c str \u003e\u003e, \u003c\u003c substr \u003e\u003e)\nReturn Type\nbool"
        },
        "name": "contains",
        "return": {
            "type": "boolean"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "str",
                "type": "string"
            },
            {
                "name": "substr",
                "type": "string"
            }
        ],
        "help": {
            "description": "Returns whether a string ends with another string.",
            "example": "string.endsWith(\"TIBCO Web Integrator\", \"Integrator\")\nReturns\ntrue",
            "usage": "string.endsWith(\u003c\u003c str \u003e\u003e, \u003c\u003c substr \u003e\u003e)\nReturn Type\nbool"
        },
        "name": "endsWith",
        "return": {
            "type": "boolean"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "str",
                "type": "string"
            },
            {
                "name": "str2",
                "type": "string"
            }
        ],
        "help": {
            "description": "Returns whether those two string are equals.",
            "example": "string.equals(\"TIBCO Web Integrator\", \"TIBCO Web Integrator\")\nReturns\ntrue",
            "usage": "string.equals(\u003c\u003c str \u003e\u003e, \u003c\u003cstr2\u003e\u003e)\nReturn Type\nboolean"
        },
        "name": "equals",
        "return": {
            "type": "boolean"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "str",
                "type": "string"
            },
            {
                "name": "str2",
                "type": "string"
            }
        ],
        "help": {
            "description": "Returns whether those two string are equals ignore case",
            "example": "string.equalsIgnoreCase(\"TIBCO web Integrator\", \"TIBCO Web Integrator\")\nReturns\ntrue",
            "usage": "string.equalsIgnoreCase(\u003c\u003c str \u003e\u003e, \u003c\u003cstr2\u003e\u003e)\nReturn Type\nboolean"
        },
        "name": "equalsIgnoreCase",
        "return": {
            "type": "boolean"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "str",
                "type": "string"
            },
            {
                "name": "substr",
                "type": "string"
            }
        ],
        "help": {
            "description": "Returns the index of the first occurrence of the substring, or -1 if the substring is not present.",
            "example": "string.index(\"TIBCO Web Integrator\", \"Web\")\nReturns\n6",
            "usage": "string.index(\u003c\u003c str \u003e\u003e, \u003c\u003c substr \u003e\u003e)\nReturn Type\nint"
        },
        "name": "index",
        "return": {
            "type": "integer"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "str",
                "type": "string"
            },
            {
                "name": "substr",
                "type": "string"
            }
        ],
        "help": {
            "description": "Returns the index of the last occurrence of the substring, or -1 if the substring is not present.",
            "example": "string.lastIndex(\"Integration with TIBCO Web Integrator\", \"Integrat\")\nReturns\n27",
            "usage": "string.lastIndex(\u003c\u003c str \u003e\u003e, \u003c\u003c substr \u003e\u003e)\nReturn Type\nint"
        },
        "name": "lastIndex",
        "return": {
            "type": "integer"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "str",
                "type": "string"
            }
        ],
        "help": {
            "description": "Returns the length of a string.",
            "example": "string.len(\"TIBCO Web Integrator\")\nReturns\n20",
            "usage": "string.len(\u003c\u003c str \u003e\u003e)\nReturn Type\nint"
        },
        "name": "len",
        "return": {
            "type": "integer"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "str",
                "type": "string"
            },
            {
                "name": "sep",
                "type": "string"
            }
        ],
        "help": {
            "description": "Splits a string into an array of substrings.",
            "example": "string.split(\"TIBCO Web Integrator\", \" \")\nReturns [\"TIBCO\", \"Web\", \"Integrator\"]",
            "usage": "string.split(\u003c\u003c str \u003e\u003e, \u003c\u003c sep \u003e\u003e)\nReturn Type\n...string"
        },
        "name": "split",
        "return": {
            "array": true,
            "type": "string"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "str",
                "type": "string"
            },
            {
                "name": "substr",
                "type": "string"
            }
        ],
        "help": {
            "description": "Returns whether a string begins with another string.",
            "example": "string.startsWith(\"TIBCO Web Integrator\", \"TIBCO\")\nReturns true",
            "usage": "string.startsWith(\u003c\u003c str \u003e\u003e, \u003c\u003c substr \u003e\u003e)\nReturn Type\nbool"
        },
        "name": "startsWith",
        "return": {
            "type": "boolean"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "input",
                "type": "string"
            },
            {
                "name": "index",
                "type": "integer"
            },
            {
                "name": "length",
                "type": "integer"
            }
        ],
        "help": {
            "description": "Returns a substring starting at the position specified by the second argument. Character positions are numbered from 0.",
            "example": "string.substring(\"12345\", 2, 3)\nReturns\n345",
            "usage": "string.substring(\u003c\u003c string \u003e\u003e, \u003c\u003c index \u003e\u003e, \u003c\u003c optional length \u003e\u003e)\nReturn Type\nstring"
        },
        "name": "substring",
        "return": {
            "type": "string"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "input",
                "type": "string"
            },
            {
                "name": "afterstr",
                "type": "string"
            }
        ],
        "help": {
            "description": "Returns the string that follows after the first occurrence of the second string, or a zero length string if the first string does not contain the second string.",
            "example": "string.substringAfter(\"1999/04/01\", \"/\")\nReturns\n04/01",
            "usage": "string.substringAfter(\u003c\u003c string \u003e\u003e, \u003c\u003c after-string \u003e\u003e)\nReturn Type\nstring"
        },
        "name": "substringAfter",
        "return": {
            "type": "string"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "input",
                "type": "string"
            },
            {
                "name": "beforestr",
                "type": "string"
            }
        ],
        "help": {
            "description": "Returns the string that follows before the first occurrence of the second string, or a zero length string if the first string does not contain the second string.",
            "example": "string.substringBefore(\"1999/04/01\", \"/\")\nReturns\n1999",
            "usage": "string.substringBefore(\u003c\u003c string \u003e\u003e, \u003c\u003c before-string \u003e\u003e)\nReturn Type\nstring"
        },
        "name": "substringBefore",
        "return": {
            "type": "string"
        },
        "display": {
            "visible": true
        }
    },
    {
        "args": [
            {
                "name": "str",
                "type": "string"
            }
        ],
        "help": {
            "description": "Trim a string by removing all trailing and leading spaces.",
            "example": "string.trim(\" \t\n TIBCO software Inc \n\t\r\n\")\nReturns\nTIBCO software Inc",
            "usage": "string.trim(\u003c\u003c str \u003e\u003e)\nReturn Type\nstring"
        },
        "name": "trim",
        "return": {
            "type": "string"
        },
        "display": {
            "visible": true
        }
    },
    {
      "name": "matchRegEx",
      "description": "Match input against regular expression   utils.matchRegEx(\"p([a-z]+)ch\", \"peach\")",
      "varArgs": true,
      "args": [
        {
          "name": "expression",
          "type": "string"
        },
        {
          "name": "input",
          "type": "string"
        }
      ],
      "return": {
        "type": "bool"
      }
    },
    {
      "name": "replaceRegEx",
      "description": "Replace data in a string based on a regular expression match   utils.replaceRegEx(\"p([a-z]+)ches\", \" I hate peaches !\", \"apples\")",
      "varArgs": true,
      "args": [
        {
          "name": "expression",
          "type": "string"
        },
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "replacewith",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    },
    {
      "name": "count",
      "description": "Count counts the number of non-overlapping instances of substring in inputstring. If substring is an empty string, Count returns 1 + the number of Unicode code points in inputstring. utils.count(\"cheese\", \"e\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "substring",
          "type": "string"
        }
      ],
      "return": {
        "type": "int"
      }
    },
    {
      "name": "index",
      "description": "Index returns the index of the first instance of substring in inputstring, or -1 if substring is not present in inputstring. utils.index(\"cheese\", \"e\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "substring",
          "type": "string"
        }
      ],
      "return": {
        "type": "int"
      }
    },
    {
      "name": "indexAny",
      "description": "indexAny returns the index of the first instance of any Unicode code point from chars in inputstring, or -1 if no Unicode code point from chars is present in inputstring. utils.indexAny(\"chicken\", \"aeiouy\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "substring",
          "type": "string"
        }
      ],
      "return": {
        "type": "int"
      }
    },
    {
      "name": "lastIndex",
      "description": "LastIndex returns the index of the last instance of substring in inputstring, or -1 if substring is not present in inputstring. utils.lastIndex(\"go gopher\", \"go\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "substring",
          "type": "string"
        }
      ],
      "return": {
        "type": "int"
      }
    },
    {
      "name": "repeat",
      "description": "Repeat returns a new string consisting of count copies of the string s. utils.repeat(\"na\", 3)",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "count",
          "type": "int"
        }
      ],
      "return": {
        "type": "string"
      }
    },
    {
      "name": "replace",
      "description": "Replace returns a copy of inputstring with the first count non-overlapping instances of old replaced by new.  If count < 0, there is no limit on the number of replacements  utils.replace(\"oink oink oink\", \"k\", \"ky\", 2)",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "old",
          "type": "string"
        },
        {
          "name": "new",
          "type": "string"
        },
        {
          "name": "count",
          "type": "int"
        }
      ],
      "return": {
        "type": "string"
      }
    },
    {
      "name": "replaceAll",
      "description": "replaceAll returns a copy of inputstring with all non-overlapping instances of old replaced by new.  utils.replaceAll(\"oink oink oink\", \"oink\", \"moo\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "old",
          "type": "string"
        },
        {
          "name": "new",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    },
    {
      "name": "toLower",
      "description": "toLower returns a copy of inputstring with all Unicode letters mapped to their lower case.  utils.tolower(\"Hello World\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    },
    {
      "name": "toUpper",
      "description": "toUpper returns a copy of inputstring with all Unicode letters mapped to their upper case.  utils.toUpper(\"Hello World\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    },
    {
      "name": "trim",
      "description": "Trim returns a slice of inputstring with all leading and trailing Unicode code points contained in cutset removed. utils.trim(\"¡¡¡Hello, Gophers!!!\", \"!¡\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "cutset",
          "type": "string",
          "required": false
        }
      ],
      "return": {
        "type": "string"
      }
    },
    {
      "name": "trimLeft",
      "description": "trimLeft returns a slice of inputstring with all leading Unicode code points contained in cutset removed. utils.trimLeft(\"¡¡¡Hello, Gophers!!!\", \"!¡\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "cutset",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    },
    {
      "name": "trimRight",
      "description": "trimRight returns a slice of inputstring with all trailing Unicode code points contained in cutset removed. utils.trimRight(\"¡¡¡Hello, Gophers!!!\", \"!¡\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "cutset",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    },
    {
      "name": "trimPrefix",
      "description": "trimPrefix returns inputstring without the provided leading prefix string. If inputstring doesn't start with prefix, it is returned unchanged. utils.trimPrefix(\"¡¡¡Hello, Gophers!!!\", \"¡¡¡Hello\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "prefix",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    },
    {
      "name": "trimSuffix",
      "description": "TrimSuffix returns inputstring without the provided trailing suffix string. If it doesn't end with suffix, it is returned unchanged. utils.trimSuffix(\"¡¡¡Hello, Gophers!!!\", \"Gophers!!!\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "suffix",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    },
    {
      "name": "split",
      "description": "Split slices s into all substrings separated by sep and returns a slice of the substrings between those separators. utils.split(\"a,b,c\", \",\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "separator",
          "type": "string"
        }
      ],
      "return": {
        "type": "array",
        "valueType": "string"
      }
    },
    {
      "name": "startsWith",
      "description": "Returns whether a string begins with another string.",
      "example": "string.startsWith(\"TIBCO Web Integrator\", \"TIBCO\")\nReturns true",
      "args": [
        {
          "name": "str",
          "type": "string"
        },
        {
          "name": "substr",
          "type": "string"
        }
      ],
      "return": {
        "type": "boolean"
      }
    },
    {
      "name": "substringAfter",
      "description": "Returns the string that follows after the first occurrence of the second string, or a zero length string if the first string does not contain the second string.",
      "example": "string.substringAfter(\"1999/04/01\", \"/\")\nReturns\n04/01",
      "args": [
        {
          "name": "input",
          "type": "string"
        },
        {
          "name": "afterstr",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    },
    {
      "name": "substringBefore",
      "description": "Returns the string that follows before the first occurrence of the second string, or a zero length string if the first string does not contain the second string.",
      "example": "string.substringBefore(\"1999/04/01\", \"/\")\nReturns\n1999",
      "args": [
        {
          "name": "input",
          "type": "string"
        },
        {
          "name": "beforestr",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    }
  ]
}
